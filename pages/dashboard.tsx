import type { NextPage } from "next"
import Head from "next/head"
import Image from "next/image"
import { FC, useEffect } from "react"
import { useState } from "react"
import {
    Unlock as UnlockIcon,
    Lock as LockIcon,
    Copy as CopyIcon,
    Check as CheckIcon,
    Search as SearchIcon,
} from "react-feather"
import { Octokit } from "octokit"
import { withAuthPublic } from "utils/auth"
import prisma from "utils/db"

interface PageProps {
    user: {
        login: string
        fullname: string
        picture: string
        token: string
    }
    sharedRepos: {
        repoId: number
        shareableLink: string
    }[]
}

interface Repo {
    id: number
    html_url: string
    description: string | null
    name: string
    full_name: string
    [property: string]: any
}

const Home: NextPage<PageProps> = ({ user, sharedRepos }) => {
    const [repos, setRepos] = useState<Repo[]>([])

    useEffect(() => {
        async function getPrivateRepos() {
            const octokit = new Octokit({ auth: user.token })
            const { data } = await octokit.request("GET /user/repos", {
                visibility: "private",
            })
            return data
        }

        async function getSharedRepos(baseRepos: Repo[]) {
            // const response = await fetch(`/api/graphql`, {
            //     method: "POST",
            //     headers: {
            //         "Content-Type": "application/json",
            //         Accept: "application/json",
            //         Authorization: `Bearer ${user.token}`,
            //     },
            //     body: JSON.stringify({
            //         query: `query repositories {
            //             repoId
            //             shareableLink
            //         }`,
            //     }),
            // })
            // const { data }: any = await response.json()

            setRepos(
                baseRepos.map((repo) => {
                    const matchedRepo = sharedRepos.filter(
                        (r: any) => r.repoId === repo.id
                    )
                    let link: string | null = null

                    if (matchedRepo.length > 0) {
                        link = matchedRepo[0].shareableLink
                    }

                    return {
                        ...repo,
                        link,
                    }
                })
            )
        }

        getPrivateRepos().then(getSharedRepos)
    }, [user, sharedRepos])

    return (
        <div className="min-h-screen bg-gray-900 text-gray-100">
            <Head>
                <title>Github Bouncer | Dashboard</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <header className="py-4 px-6 border-b border-gray-600 flex flex-col-reverse items-center justify-between md:flex-row md:space-y-0">
                <form
                    className="border border-gray-600 rounded flex-1 w-full flex items-center max-w-sm mx-auto"
                    onSubmit={(e) => {
                        e.preventDefault()
                    }}
                >
                    <div className="py-2 px-4">
                        <SearchIcon size={16} className="text-gray-400" />
                    </div>
                    <input
                        type="text"
                        name="search"
                        id="search"
                        placeholder="Search..."
                        className="py-2 pr-4 bg-transparent text-sm font-light focus:outline-none"
                    />
                </form>

                <div className="flex items-center space-x-4 w-fit mb-6 md:m-0">
                    <span className="text-sm">{user.login}</span>
                    <div className="w-8 h-8 overflow-hidden rounded-full ring-2 ring-blue-400 ring-offset-4 ring-offset-gray-900">
                        <Image
                            className="w-full"
                            src={
                                user.picture ||
                                "https://wallpaperaccess.com/full/4595683.jpg"
                            }
                            width={40}
                            height={40}
                            alt="Profile Pic"
                        />
                    </div>
                </div>
            </header>

            <main className="max-w-6xl mx-auto py-12 px-6">
                <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {repos.map((repo) => (
                        <li
                            key={repo.id}
                            className="w-full max-w-sm mx-auto flex flex-col border border-gray-600 rounded shadow p-6 bg-black space-y-4"
                        >
                            <RepoCard
                                id={repo.id}
                                name={repo.name}
                                fullname={repo.full_name}
                                description={repo.description || ""}
                                htmlUrl={repo.html_url}
                                owner={{ token: user.token, id: repo.owner.id }}
                                link={repo.link}
                            />
                        </li>
                    ))}
                </ul>
            </main>
        </div>
    )
}

const CopyButton: FC = ({ children }) => {
    const [copied, setCopied] = useState(false)

    useEffect(() => {
        if (copied) {
            setTimeout(() => setCopied(false), 3000)
        }
    }, [copied])

    return (
        <button
            onClick={() => {
                navigator.clipboard.writeText(String(children))
                setCopied(true)
            }}
            disabled={copied}
            title="Copy to clipboard"
            className="py-1 px-2 bg-gray-600"
        >
            {copied ? <CheckIcon size={16} /> : <CopyIcon size={16} />}
        </button>
    )
}

interface RepoCardProps {
    id: number
    name: string
    fullname: string
    description: string
    htmlUrl: string
    owner: any
    link?: string
}

const RepoCard: FC<RepoCardProps> = ({
    id,
    name,
    fullname,
    description,
    htmlUrl,
    owner,
    link,
}) => {
    const [shareableLink, setShareableLink] = useState(link || "")

    async function createLink() {
        const response = await fetch(`/api/graphql`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
                Authorization: `Bearer ${owner.token}`,
            },
            body: JSON.stringify({
                query: "mutation CreateLink($input: CreateShareableLinkInput) { link:createShareableLink(input: $input) }",
                variables: {
                    input: {
                        repoId: id,
                        name,
                        fullname,
                        htmlUrl,
                        ownerId: owner.id,
                    },
                },
            }),
        })
        const { data } = await response.json()
        if (!data || !data.link) return alert("something went wrong")
        console.log({ data })
        setShareableLink(data.link)
    }

    return (
        <>
            <div className="flex justify-between items-start space-x-4">
                <div className="flex-1">
                    <h4 className="font-medium text-white">{name}</h4>
                    <small className="text-gray-400 text-xs">{fullname}</small>
                </div>
                {shareableLink === "" ? (
                    <button
                        onClick={createLink}
                        className="p-1"
                        title="Create shareable link"
                    >
                        <UnlockIcon size={16} />
                    </button>
                ) : (
                    <button
                        onClick={() => setShareableLink("")}
                        className="p-1"
                        title="Stop sharing"
                    >
                        <LockIcon size={16} />
                    </button>
                )}
            </div>
            <p
                className="flex-1 font-light text-sm line-clamp-3"
                title={description || ""}
            >
                {description || ""}
            </p>
            {shareableLink && (
                <div className="flex">
                    <div className="w-full border border-gray-600 bg-gray-800 text-sm truncate p-1">
                        {shareableLink}
                    </div>
                    <CopyButton>{shareableLink}</CopyButton>
                </div>
            )}
        </>
    )
}

export const getServerSideProps = withAuthPublic(async ({ req }: any) => {
    const sharedRepos = await prisma.repository.findMany({
        where: { owner: { token: req.session.user.token } },
    })

    return {
        props: {
            sharedRepos: sharedRepos.map((repo) => ({
                repoId: repo.repoId,
                shareableLink: repo.shareableLink,
            })),
        },
    }
})

export default Home
